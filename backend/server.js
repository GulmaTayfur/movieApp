const http = require("http");

const getRequest = require("./methods/get");
const postRequest = require("./methods/post");
const deleteRequest = require("./methods/delete");

// 1) server oluÅŸtur
const server = http.createServer((req, res) => {
  console.log("ğŸ˜€ğŸ˜€ Ä°STEK GELDÄ°", req.method);
  // frontende gÃ¶nderilecek bÃ¼tÃ¼n cevaplara eklenecek ve cros hatasÄ±nÄ± engelleyecek

  res.setHeader("Access-Control-Allow-origin", "*");

  // istek atÄ±lan method tÃ¼rÃ¼ne gÃ¶re client'a cevap vericek fonksiyonu belirledik. FonksiyonlarÄ± module yapÄ±sÄ± sayesinde kod kalabalÄ±ÄŸÄ± olmamasÄ± iÃ§in ayrÄ± dostalarda tanÄ±mladÄ±k.
  switch (req.method) {
    // Frontend'ten bir post/put/patch/delete isteÄŸi atÄ±ldÄ±ÄŸÄ± zaman tarayÄ±cÄ± Ã¶ncelikle server'Ä±n bu istek tiplerini kabul edip etmediÄŸini kontrol etmek amacÄ±yala options methoduyla istek atÄ±yor. EÄŸer options isteÄŸi gelince cevap gÃ¶ndermezsek diÄŸer isteÄŸi hiÃ§ atmÄ±yor options gelince doÄŸru header'lar ile cevap verirsek options'Ä±n ardÄ±ndan asÄ±l isteÄŸi gÃ¶nderiyor.

    case "OPTIONS":
      res.setHeader(
        "Access-Control-Allow-Methods",
        "GET, POST, DELETE, PUT, PATCH, OPTIONS"
      );
      res.setHeader("Access-Control-Allow-Headers", "Content-Type");
      res.end();
      break;

    case "GET":
      getRequest(req, res);
      break;

    case "POST":
      postRequest(req, res);
      break;

    case "DELETE":
      deleteRequest(req, res);
      break;

    default:
      // cevabÄ±n durum kodunu beliler
      res.statusCode = 404;

      // gÃ¶nderilecek cevaba iÃ§eriÄŸin tipini headers olarak ekle
      res.setHeader("Content-Type", "application/json");

      // cevabÄ±n iÃ§eriÄŸini belirleme
      res.write(
        JSON.stringify({
          message: "Ä°stek yapÄ±lan adres tanÄ±msÄ±z",
        })
      );
      // client'a cevabÄ± gÃ¶nder
      res.end();
  }
});

// 2) berlirli porta gelen istekleri dinle

const port = 5005;

server.listen(port, () => {
  console.log(`Server ${port} 'a gelen istekleri dinlemeye baÅŸladÄ±.`);
});
